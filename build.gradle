
buildscript {
    repositories {
        mavenLocal()
        maven { url "https://nexus.ala.org.au/content/groups/public/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
//        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:2.14.6'
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:1.4"
    }
}

plugins {
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
    id 'com.bertramlabs.asset-pipeline' version '2.5.0'
    //id "com.energizedwork.webdriver-binaries" version "1.1"
}

ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome", "chromeHeadless"]

    ext {
        gebVersion = '2.3'
        seleniumVersion = '3.14.0'
        chromeDriverVersion = '2.44'
        geckoDriverVersion = '0.26.0'
    }
}

version "0.4.1_SNAPSHOT"
group "au.org.ala"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:'com.bertramlabs.asset-pipeline'

apply plugin:"com.energizedwork.webdriver-binaries"

apply from: 'https://raw.githubusercontent.com/AtlasOfLivingAustralia/travis-build-configuration/master/travis_grails_publish.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url 'https://jitpack.io' }
}


configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
}

dependencies {
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"

    compile "org.hibernate:hibernate-validator:5.2.3.Final"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"


    // Additional Plugins
    compile 'org.grails.plugins:external-config:1.2.2'
    compile group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'

    compile "org.grails.plugins:ala-auth:3.1.3"
    compile "org.grails.plugins:ala-admin-plugin:2.1"
    compile "org.grails.plugins:ala-bootstrap3:3.2.3"
    compile "au.org.ala.plugins.grails:ala-charts-plugin:2.0.2-SNAPSHOT"

    runtime 'org.grails.plugins:sandbox-hub:1.0'

    compile 'org.grails.plugins:cache'
//    compile 'org.grails.plugins:cache-ehcache:3.0.0.M1' // check https://github.com/AtlasOfLivingAustralia/userdetails/blob/9d5d76fda0954a92dd379eb6f3a9061d576d95fd/build.gradle

    compile 'org.grails.plugins:swagger:1.0.0'
    compile 'org.webjars:swagger-ui:2.2.8'

    assets 'com.craigburke.angular:angular-annotate-asset-pipeline:2.4.1'
    assets "com.craigburke.angular:angular-template-asset-pipeline:2.4.0"

    compile('com.github.ziplet:ziplet:2.0.0') {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
    }

    compile 'org.springframework.boot:spring-boot-starter-redis:1.4.6.RELEASE'
    compile 'org.springframework.session:spring-session:1.3.5.RELEASE'

    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile("org.spockframework:spock-core:1.3-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"

    // Drivers
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"

    testCompile "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"


}

// Set to true it needed only for development
boolean inplace = false


if (inplace) {
    grails {
        exploded = true
        plugins {
            compile (project(':ala-charts-plugin')) {
                exclude group: 'org.grails', module: 'grails-plugin-converters'
            }
        }
    }
}

task _Events {
    doLast {
        new GroovyScriptEngine([''] as String[]).run('_Events.groovy', new Binding())
    }
}

//compileTestGroovy.enabled = false

// the tasks used here for dependsOn may be incomplete/incorrect
assetCompile.dependsOn(_Events)
compileGroovy.dependsOn(_Events)
bootRun.dependsOn(_Events)

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always', '-Xmx4G')
    addResources = true
}


bootRepackage {
    enabled = true
    executable = true
    classifier = 'exec'
}

assets {
    //developmentRuntime = false
    minifyJs = true
    minifyCss = true
}

webdriverBinaries {
    chromedriver "$chromeDriverVersion"
    geckodriver "$geckoDriverVersion"
}


tasks.getByName("integrationTest") {
    group JavaBasePlugin.VERIFICATION_GROUP

    //outputs.upToDateWhen { false }  // Always run tests

    systemProperty "geb.build.reportsDir", reporting.file("geb/$name")

    systemProperty "geb.env",  System.properties['driver']?:"firefox"  // firefox by default
    // pass test server by -DbaseUrl
    systemProperty "geb.build.baseUrl", System.properties['baseUrl'] ?: "http://devt.ala.org.au:8087"
    //Store username and password into the default config file
    systemProperty "configFile",System.properties['configFile']?: "/data/spatial-hub/test/default.properties"
    //or pass with -Dusername, -Dpassword
    systemProperty "username", System.properties['username']
    systemProperty "password", System.properties['password']
}


tasks.withType(Test) {
    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=128m'
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}
