buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.2.4"
    }
}

plugins {
    id "com.gorylenko.gradle-git-properties" version "2.3.1"
    // id 'com.bertramlabs.asset-pipeline' version '2.5.0'
}

version "0.4.1_SNAPSHOT"
group "au.org.ala"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
//apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:'com.bertramlabs.asset-pipeline'
apply plugin:"maven-publish"

//apply from: 'https://raw.githubusercontent.com/AtlasOfLivingAustralia/travis-build-configuration/master/travis_grails_publish.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url 'https://jitpack.io' }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }

    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:gsp"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"

    // Additional Plugins
    //compile 'org.grails.plugins:external-config:1.2.2'
    compile 'dk.glasius:external-config:2.0.1'

    compile group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'
    compile 'org.apache.httpcomponents:httpclient:4.5.13'

    compile "au.org.ala:ala-cas-client:2.5"
    compile "org.grails.plugins:ala-auth:3.2.3"
    compile "org.grails.plugins:ala-admin-plugin:2.1"
    compile "org.grails.plugins:ala-bootstrap3:3.2.3"
    compile "au.org.ala.plugins.grails:ala-charts-plugin:2.0.2-SNAPSHOT"

    runtime 'org.grails.plugins:sandbox-hub:1.0'

    compile 'org.grails.plugins:cache'
//    compile 'org.grails.plugins:cache-ehcache:3.0.0.M1' // check https://github.com/AtlasOfLivingAustralia/userdetails/blob/9d5d76fda0954a92dd379eb6f3a9061d576d95fd/build.gradle

    //compile 'org.grails.plugins:swagger:1.0.1'
    compile group: 'io.swagger', name: 'swagger-annotations', version: '1.6.2'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.jasig.cas.client', name: 'cas-client-core', version: '3.5.1'
    compile 'org.webjars:swagger-ui:2.2.8'

    assets 'com.craigburke.angular:angular-annotate-asset-pipeline:2.4.1'
    assets "com.craigburke.angular:angular-template-asset-pipeline:2.4.0"

    compile('com.github.ziplet:ziplet:2.0.0') {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
    }

    compile 'org.springframework.boot:spring-boot-starter-redis:1.4.6.RELEASE'
    compile 'org.springframework.session:spring-session:1.3.5.RELEASE'

   // compile "com.bertramlabs.plugins:asset-pipeline-grails:3.2.4"
    compile group: 'com.bertramlabs.plugins', name: 'asset-pipeline-core', version: '2.14.4'

}

// Set to true it needed only for development
boolean inplace = false


if (inplace) {
    grails {
        exploded = true
        plugins {
            compile (project(':ala-charts-plugin')) {
                exclude group: 'org.grails', module: 'grails-plugin-converters'
            }
        }
    }
}

task _Events {
    doLast {
        new GroovyScriptEngine([''] as String[]).run('_Events.groovy', new Binding())
    }
}

//compileTestGroovy.enabled = false

// the tasks used here for dependsOn may be incomplete/incorrect
assetCompile.dependsOn(_Events)
compileGroovy.dependsOn(_Events)
bootRun.dependsOn(_Events)

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

//bootRepackage {
//    enabled = true
//    executable = true
//    classifier = 'exec'
//}

assets {
   // minifyJs = true
    minifyCss = true
}



// Standard ALA import doesn't work with this version
publishing {
    repositories {
        maven {
            name 'Nexus'
            url "https://nexus.ala.org.au/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases' }"
            credentials {
                username = System.getenv('TRAVIS_DEPLOY_USERNAME')
                password = System.getenv('TRAVIS_DEPLOY_PASSWORD')
            }
        }
    }
    publications {
        mavenJar(MavenPublication) {
            pom.withXml {
                def pomNode = asNode()
                pomNode.dependencyManagement.replaceNode {}

                // simply remove dependencies without a version
                // version-less dependencies are handled with dependencyManagement
                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
            from components.web
        }
    }
}
