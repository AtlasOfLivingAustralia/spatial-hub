buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://nexus.ala.org.au/content/groups/public/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.0"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.3.2"
        classpath 'com.bertramlabs.plugins:asset-pipeline-core:2.14.2'
    }
}

version "1.1.0-SNAPSHOT"
group "au.org.ala"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"org.grails.grails-gsp"
//Angular assert wrapper needs
apply plugin:"com.bertramlabs.asset-pipeline"
apply plugin:"maven-publish"

war {
    enabled=true
}

buildProperties {
    inputs.property("info.app.build.date", new Date().format('yyyy-MM-dd HH:mm:ss'))
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:gsp"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "javax.xml.bind:jaxb-api:2.3.0"

    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.seleniumhq.selenium:selenium-remote-driver:3.14.0"
    testCompile "org.seleniumhq.selenium:selenium-api:3.14.0"
    testCompile "org.seleniumhq.selenium:selenium-support:3.14.0"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:3.14.0"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:3.14.0"

    // Additional Plugins
    implementation 'org.grails.plugins:external-config:2.0.0'
    implementation group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.4'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'commons-lang', name: 'commons-lang', version: '2.6'

    implementation group: "com.bertramlabs.plugins", name: "asset-pipeline-gradle", version: "3.0.10"
    implementation 'com.bertramlabs.plugins:asset-pipeline-core:2.14.2'

    //Angular profile wrapper needs
    assets 'com.craigburke.angular:angular-annotate-asset-pipeline:2.4.1'
    assets "com.craigburke.angular:angular-template-asset-pipeline:2.4.0"

    compile('com.github.ziplet:ziplet:2.0.0') {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
    }
    compile "org.grails.plugins:ala-admin-plugin:2.3.0"

    compile "org.grails.plugins:ala-auth:5.1.1"
    compile "org.grails.plugins:ala-bootstrap3:4.1.0"

    runtime "au.org.ala.plugins.grails:ala-charts-plugin:2.1-ANGULAR-4"
    runtime 'org.grails.plugins:sandbox-hub:1.0'
}

// Set to true it needed only for development
boolean inplace = false

if (inplace) {
    grails {
        exploded = true
        plugins {
            compile (project(':ala-charts-plugin')) {
                exclude group: 'org.grails', module: 'grails-plugin-converters'
            }
        }
    }
}

task _Events {
    doLast {
        new GroovyScriptEngine([project.projectDir.toString()] as String[]).run('_Events.groovy', new Binding())
    }
}

// the tasks used here for dependsOn may be incomplete/incorrect
assetCompile.dependsOn(_Events)
compileGroovy.dependsOn(_Events)
bootRun.dependsOn(_Events)

bootRun {
    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions.forkOptions) {
        memoryMaximumSize = '4g'
        jvmArgs = ['-Xms2g', '-Xmx4g']
    }
}

ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome", "chromeHeadless"]
}

webdriverBinaries {
    chromedriver '2.45.0'
    geckodriver '0.26.0'
}

tasks.getByName("integrationTest") {
    group JavaBasePlugin.VERIFICATION_GROUP
    systemProperty "geb.build.reportsDir", reporting.file("geb/$name")
    systemProperty "geb.env",  System.properties['driver']?:"firefox"  // firefox by default
    // pass test server by -DbaseUrl
    systemProperty "geb.build.baseUrl", System.properties['baseUrl'] ?: "http://devt.ala.org.au:8087"
    //Store username and password into the default config file
    systemProperty "configFile",System.properties['configFile']?: "/data/spatial-hub/test/default.properties"
    //or pass with -Dusername, -Dpassword
    systemProperty "username", System.properties['username']
    systemProperty "password", System.properties['password']
}


tasks.withType(Test) {
    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=512m'
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

assets {
    minifyJs = true
    minifyCss = true
}

// Refer to FieldCapture: https://github.com/AtlasOfLivingAustralia/fieldcapture/blob/feature/grails4/gradle/publish.gradle

publishing {
    repositories {
        maven {
            name 'Nexus'
            url "https://nexus.ala.org.au/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
            credentials {
                username = System.getenv('TRAVIS_DEPLOY_USERNAME')
                password = System.getenv('TRAVIS_DEPLOY_PASSWORD')
            }
        }
    }

    publications {
        MavenPublication(MavenPublication) {
            pom.withXml {
                def pomNode = asNode()
                pomNode.dependencyManagement.replaceNode {}

                // simply remove dependencies without a version
                // version-less dependencies are handled with dependencyManagement
                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
            artifact bootWar
        }
    }
}
